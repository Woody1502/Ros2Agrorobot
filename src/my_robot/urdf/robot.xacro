<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="my_robot">

  <!-- ==================== PARAMETERS ==================== -->
  <xacro:arg name="use_gazebo" default="true" />
  <xacro:arg name="mesh_prefix" default="package://my_robot/meshes/" />
  
  <!-- Base link properties -->
  <xacro:property name="base_mass" value="500.1" />
  <xacro:property name="mesh_prefix" value="package://my_robot/meshes/" />
  <xacro:property name="base_inertia" 
    value="${ dict(ixx=0.31782,ixy=-0.209,ixz=0.00045539,iyy=0.83341,iyz=0.00020479,izz=1.0223 ) }"/>

  <!-- Wheel properties -->
  <xacro:property name="wheel_mass" value="50" />
  <xacro:property name="wheel_inertia"
    value="${dict(
      ixx= 0.003289, ixy= 0, ixz= 0,
      iyy= 0.003289, iyz= 0, izz= 0.006109
    )}" />

  <!-- ==================== MACROS ==================== -->
  
  <!-- Generic link macro -->
  <xacro:macro name="standard_link" params="name mass inertia mesh mesh_prefix *visual_color">
    <link name="${name}">
      <inertial>
        <mass value="${mass}" />
        <inertia 
          ixx="${inertia['ixx']}" ixy="${inertia['ixy']}" ixz="${inertia['ixz']}"
          iyy="${inertia['iyy']}" iyz="${inertia['iyz']}" izz="${inertia['izz']}" />
      </inertial>
      <visual>
        <geometry>
          <mesh filename="${mesh_prefix}${mesh}.STL"/>
        </geometry>
        <xacro:insert_block name="visual_color" />
      </visual>
      <collision>
        <geometry>
          <mesh filename="${mesh_prefix}${mesh}.STL"/>
        </geometry>
      </collision>
    </link>
  </xacro:macro>

  <!-- Wheel macro -->
  <xacro:macro name="wheel_assembly" params="prefix parent xyz rpy steering_lower steering_upper is_driven:=false">
    <!-- Steering link (f_l или f_r) -->
    <xacro:standard_link 
      name="link_${prefix}" 
      mass="30" 
      mesh_prefix='${mesh_prefix}'
      inertia="${dict(ixx= 3.646e-5, iyy= 3.419e-5, izz= 8.809e-6, ixy=0, ixz=0, iyz=2.078e-6)}"
      mesh="link_${prefix}">
      <material name="silver">
        <color rgba="0.776 0.776 0.819 1" />
      </material>
    </xacro:standard_link>

    <joint name="joint_${prefix}" type="revolute">
      <parent link="${parent}"/>
      <child link="link_${prefix}"/>
      <origin xyz="${xyz}" rpy="${rpy}"/>
      <axis xyz="0 1 0"/>
      <limit lower="${steering_lower}" upper="${steering_upper}" effort="100" velocity="1.0"/>
    </joint>

    <!-- Wheel (f_l_w или f_r_w) -->
    <xacro:standard_link 
      name="link_${prefix}_w" 
      mass="${wheel_mass}" 
      mesh_prefix='${mesh_prefix}'
      inertia="${wheel_inertia}"
      mesh="link_${prefix}_w">
      <material name="gray">
        <color rgba="0.439 0.411 0.411 1" />
      </material>
    </xacro:standard_link>

    <joint name="joint_${prefix}_w" type="continuous">
      <parent link="link_${prefix}"/>
      <child link="link_${prefix}_w"/>
      <origin xyz="0 -0.0287 0.0315" rpy="0 0 ${rpy.split()[2]}"/>
      <axis xyz="0 0 1"/>
    </joint>

    <!-- ROS 2 Control transmission for driven wheels -->
    <xacro:if value="${is_driven}">
      <xacro:if value="$(arg use_gazebo)">
        <transmission name="${prefix}_transmission">
          <type>transmission_interface/SimpleTransmission</type>
          <joint name="joint_${prefix}_w">
            <hardwareInterface>Velocity</hardwareInterface>
          </joint>
          <actuator name="${prefix}_motor">
            <mechanicalReduction>1</mechanicalReduction>
          </actuator>
        </transmission>
      </xacro:if>
    </xacro:if>
  </xacro:macro>

  <!-- Rear wheel macro (без рулевого управления) -->
  <xacro:macro name="rear_wheel_assembly" params="prefix parent xyz rpy is_driven:=false">
    <!-- Wheel -->
    <xacro:standard_link 
      name="link_${prefix}_w" 
      mass="80" 
      mesh_prefix='${mesh_prefix}'
      inertia="${dict(
        ixx=0.010218, ixy=0, ixz=0,
        iyy=0.010218, iyz=0, izz=0.018926
      )}"
      mesh="link_${prefix}_w">
      <material name="gray">
        <color rgba="0.439 0.411 0.411 1" />
      </material>
    </xacro:standard_link>

    <joint name="joint_${prefix}_w" type="continuous">
      <parent link="${parent}"/>
      <child link="link_${prefix}_w"/>
      <origin xyz="${xyz}" rpy="${rpy}"/>
      <axis xyz="0 0 1"/>
    </joint>

    <!-- ROS 2 Control transmission for driven wheels -->
    <xacro:if value="${is_driven}">
      <xacro:if value="$(arg use_gazebo)">
        <transmission name="${prefix}_transmission">
          <type>transmission_interface/SimpleTransmission</type>
          <joint name="joint_${prefix}_w">
            <hardwareInterface>Velocity</hardwareInterface>
          </joint>
          <actuator name="${prefix}_motor">
            <mechanicalReduction>1</mechanicalReduction>
          </actuator>
        </transmission>
      </xacro:if>
    </xacro:if>
  </xacro:macro>

  <!-- ==================== ROBOT STRUCTURE ==================== -->
  
  <!-- World link -->
  <link name="car_world"/>

  <!-- Base link -->
  <xacro:standard_link 
    name="base_link" 
    mass="${base_mass}" 
    inertia="${base_inertia}"
    mesh="base_link"
    mesh_prefix='${mesh_prefix}'>
    <material name="gray_dark">
      <color rgba="0.572 0.576 0.576 1" />
    </material>
  </xacro:standard_link>

  <joint name="world_to_base" type="fixed">
    <parent link="car_world"/>
    <child link="base_link"/>
    <origin xyz="0 0 1" rpy="0 0 0"/>
  </joint>

  <!-- Front wheels (steerable) -->
  <xacro:wheel_assembly prefix="f_r" parent="base_link" 
    xyz="-0.11936 0.03 -0.083652" rpy="1.5708 0 3.1403" steering_lower="-1.57" steering_upper="1.57"/>
  
  <xacro:wheel_assembly prefix="f_l" parent="base_link" 
    xyz="-0.11936 -0.03 -0.083652" rpy="1.5708 0 -0.0013373" steering_lower="-1.57" steering_upper="1.57"/>

  <!-- Rear wheels (driven) -->
  <xacro:rear_wheel_assembly prefix="r" parent="base_link" is_driven="true"
    xyz="0.12954 0.058 -0.093652" rpy="1.5708 -0.72515 3.1416"/>
  
  <xacro:rear_wheel_assembly prefix="l" parent="base_link" is_driven="true"
    xyz="0.12954 -0.058 -0.093652" rpy="1.5708 -1.3692 0"/>

  <!-- Additional components -->
  <xacro:standard_link name="link_chair" mass="10" mesh_prefix='${mesh_prefix}'
    inertia="${dict(ixx=1.13e-5, iyy=1.186e-5, izz=1.08e-5, ixy=-3.027e-6, ixz=0, iyz=0)}"
    mesh="link_chair">
    <material name="gray_light">
      <color rgba="0.698 0.698 0.698 1" />
    </material>
  </xacro:standard_link>

  <joint name="joint_chair" type="fixed">
    <parent link="base_link"/>
    <child link="link_chair"/>
    <origin xyz="0.12954 0 0" rpy="1.5708 0 0"/>
  </joint>

  <!-- Small wheel -->
  <xacro:standard_link name="link_w" mass="5" mesh_prefix='${mesh_prefix}'
    inertia="${dict(ixx=7.867e-7, iyy=7.914e-7, izz=7.867e-7, ixy=0, ixz=0, iyz=0)}"
    mesh="link_w">
    <material name="gray_light">
      <color rgba="0.698 0.698 0.698 1" />
    </material>
  </xacro:standard_link>

  <joint name="joint_w" type="fixed">
    <parent link="base_link"/>
    <child link="link_w"/>
    <origin xyz="0.002429 0 -0.011517" rpy="1.9409 0.9276 0.45148"/>
  </joint>

  <!-- ==================== ROS 2 CONTROL ==================== -->
  <xacro:if value="$(arg use_gazebo)">

    <ros2_control name="GazeboSystem" type="system">
      <hardware>
        <plugin>gz_ros2_control/GazeboSimSystem</plugin>
      </hardware>
      <joint name="joint_l_w">
        <command_interface name="velocity">
          <param name="min">-10</param>
          <param name="max">10</param>
        </command_interface>
        <state_interface name="position"/>
        <state_interface name="velocity"/>
      </joint>
      <!-- Wheel motors (velocity control) -->
      <joint name="joint_r_w">
        <command_interface name="velocity">
          <param name="min">-10</param>
          <param name="max">10</param>
        </command_interface>
        <state_interface name="position"/>
        <state_interface name="velocity"/>
      </joint>

      <joint name="joint_f_l_w">
        <command_interface name="velocity">
          <param name="min">-10</param>
          <param name="max">10</param>
        </command_interface>
        <state_interface name="position"/>
        <state_interface name="velocity"/>
      </joint>
     
      <joint name="joint_f_r_w">
        <command_interface name="velocity">
          <param name="min">-10</param>
          <param name="max">10</param>
        </command_interface>
        <state_interface name="position"/>
        <state_interface name="velocity"/>
      </joint>
      
      

      <!-- Steering mechanisms (position control) -->
      <joint name="joint_f_r">
        <command_interface name="position">
          <param name="min">0</param>
          <param name="max">0.5</param>
        </command_interface>
        <state_interface name="position"/>
        <state_interface name="velocity"/>
      </joint>
      
      <joint name="joint_f_l">
        <command_interface name="position">
          <param name="min">0</param>
          <param name="max">0.5</param>
        </command_interface>
        <state_interface name="position"/>
        <state_interface name="velocity"/>
      </joint>
    </ros2_control>
  </xacro:if>

  <!-- ==================== GAZEBO ==================== -->
  <xacro:if value="$(arg use_gazebo)">
    <!-- ROS 2 Control plugin -->
    <gazebo>
      <plugin name="gz_ros2_control::GazeboSimROS2ControlPlugin" filename="libgz_ros2_control-system.so">
        <parameters>$(find my_robot)/config/controllers.yaml</parameters>
      </plugin>
              <!--plugin name="gz::sim::systems::DiffDrive" filename="gz-sim-diff-drive-system">

      
           
            <right_joint>joint_r_w</right_joint>
            <wheel_separation>0.297</wheel_separation>
            <wheel_radius>0.033</wheel_radius>


        
            <max_linear_acceleration>0.33</max_linear_acceleration>

            
            <topic>cmd_vel</topic>

            
  
            <frame_id>odom</frame_id>
            <child_frame_id>base_link</child_frame_id>
            <odom_topic>odom</odom_topic>
            <odom_publisher_frequency>30</odom_publisher_frequency>
            
            <tf_topic>/tf</tf_topic>

        </plugin> -->


        <!-- <plugin filename="gz-sim-joint-state-publisher-system"
            name="gz::sim::systems::JointStatePublisher">
            <topic>joint_states</topic>
            <joint_name>joint_f_r</joint_name>
            <joint_name>joint_f_l</joint_name>
            <joint_name>joint_r_w</joint_name>
            <joint_name>joint_l_w</joint_name>
            <joint_name>joint_f_r_w</joint_name>
            <joint_name>joint_f_l_w</joint_name>


        </plugin> -->
    </gazebo>
    
    <!-- Default material -->
    <gazebo reference="base_link">
      <material>Gazebo/Grey</material>
    </gazebo>
  </xacro:if>
</robot>